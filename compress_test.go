package crtf

import (
	"bytes"
	"testing"
)

// Test RTF compression.
func TestCompression(t *testing.T) {
	// Test compression types compressed and uncompressed.
	data := []byte("{\\rtf1\\ansi\\ansicpg1252\\pard hello world}\r\n")
	expectedCompressed := []byte{
		0x2d, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x00, 0x00, 0x4c, 0x5a, 0x46, 0x75,
		0xf1, 0xc5, 0xc7, 0xa7, 0x03, 0x00, 0x0a, 0x00, 0x72, 0x63, 0x70, 0x67,
		0x31, 0x32, 0x35, 0x42, 0x32, 0x0a, 0xf3, 0x20, 0x68, 0x65, 0x6c, 0x09,
		0x00, 0x20, 0x62, 0x77, 0x05, 0xb0, 0x6c, 0x64, 0x7d, 0x0a, 0x80, 0x0f,
		0xa0,
	}

	result := Compress(data, true)
	if !bytes.Equal(result, expectedCompressed) {
		t.Errorf("Compressed result mismatch.\nGot: %v\nWant: %v", result, expectedCompressed)
	}

	// Test uncompressed
	expectedUncompressed := []byte{
		0x37, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x00, 0x00, 0x4d, 0x45, 0x4c, 0x41,
		0x00, 0x00, 0x00, 0x00, 0x7b, 0x5c, 0x72, 0x74, 0x66, 0x31, 0x5c, 0x61,
		0x6e, 0x73, 0x69, 0x5c, 0x61, 0x6e, 0x73, 0x69, 0x63, 0x70, 0x67, 0x31,
		0x32, 0x35, 0x32, 0x5c, 0x70, 0x61, 0x72, 0x64, 0x20, 0x68, 0x65, 0x6c,
		0x6c, 0x6f, 0x20, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x7d, 0x0d, 0x0a,
	}

	resultUncompressed := Compress(data, false)
	if !bytes.Equal(resultUncompressed, expectedUncompressed) {
		t.Errorf("Uncompressed result mismatch.\nGot: %v\nWant: %v", resultUncompressed, expectedUncompressed)
	}
}

// Test compression of data with repeated tokens, crossing write position.
func TestCompressionRepeatedTokens(t *testing.T) {
	data := []byte("{\\rtf1 WXYZWXYZWXYZWXYZWXYZ}")
	expected := []byte{
		0x1a, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x4c, 0x5a, 0x46, 0x75,
		0xe2, 0xd4, 0x4b, 0x51, 0x41, 0x00, 0x04, 0x20, 0x57, 0x58, 0x59, 0x5a,
		0x0d, 0x6e, 0x7d, 0x01, 0x0e, 0xb0,
	}

	result := Compress(data, true)
	if !bytes.Equal(result, expected) {
		t.Errorf("Compression with repeated tokens result mismatch.\nGot: %v\nWant: %v", result, expected)
	}
}
